// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {

    ext.kotlinVersion = '1.9.23'
    ext.koinVersion = '2.0.1'
    ext.espressoVersion = '3.2.0'
    ext.dokkaVersion = '0.10.1'

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        mavenLocal()
        maven { url "https://dl.bintray.com/ona/kujaku" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://maven.google.com' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.6.1'
        classpath "gradle.plugin.org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.12.2"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokkaVersion}"
//        classpath 'gradle.plugin.com.onesignal:onesignal-gradle-plugin:[0.12.10, 0.99.99]'
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.23")
//        classpath 'com.google.gms:google-services:4.3.3'
//        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.3.0'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

def localProperties = new Properties()
localProperties.load(new FileInputStream(rootProject.file("local.properties")))

allprojects {

    tasks.whenTaskAdded { task ->
        if (task.name == "lint") {
            task.enabled = false
        }
    }
	
	repositories {
        google()
        mavenCentral()
        mavenLocal()
        maven { url 'https://maven.google.com' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url 'https://jitpack.io' }
        maven { url "https://acra.googlecode.com/svn/repository/releases" }
        maven { url "https://repo.maven.apache.org/maven2" }
        maven { url "https://cloudant.github.io/cloudant-sync-eap/repository" }
        maven { url 'https://maven.fabric.io/public' }
        maven { url "https://s3.amazonaws.com/repo.commonsware.com" }
        maven { url 'https://repo1.maven.org/maven2/com/ibm/fhir' }
        maven {
            url = uri("https://api.mapbox.com/downloads/v2/releases/maven")
            authentication { basic(BasicAuthentication) }
            credentials {
                username = 'mapbox' // Do not change
                password = localProperties["mapbox.sdk.token"] ?: ""
            }
        }

        maven { url  "https://s01.oss.sonatype.org/content/repositories/snapshots" }
        maven { url  "https://repo.spring.io/plugins-release" }
        maven { url  "https://repository.liferay.com/nexus/content/repositories/public" }
    }
}

project.ext.preDexLibs = !project.hasProperty('disablePreDex')

subprojects {

    group = 'org.smartregister'

    ext.androidToolsBuildGradle = '4.0.1'
    ext.androidBuildToolsVersion = '34.0.0'
    ext.androidMinSdkVersion = 27
    ext.androidCompileSdkVersion = 34
    ext.androidTargetSdkVersion = 34

    project.ext {
        if (project.hasProperty('preDexEnable')) {
            project.ext.preDexLibs = project.properties['preDexEnable'].equals('true')
        } else {
            project.ext.preDexLibs = true // pre dexing should be true by default
        }

        println('PREDEX ' + (project.ext.preDexLibs ? 'ENABLED' : 'DISABLED')) // goes to build log or console output
    }
    // Improve build server performance by allowing disabling of pre-dexing
    // (see http://tools.android.com/tech-docs/new-build-system/tips#TOC-Improving-Build-Server-performance.)
/*    project.plugins.whenPluginAdded { plugin ->
        if ("com.android.build.gradle.AppPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        } else  {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }*/
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}
