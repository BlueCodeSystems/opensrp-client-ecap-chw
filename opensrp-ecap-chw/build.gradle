buildscript {
    repositories {
        google()
        mavenCentral()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        maven { url "https://jitpack.io" }

    }
    dependencies {
        classpath 'org.apache.commons:commons-lang3:3.10'
        classpath 'com.android.tools.build:gradle:4.0.2'
        classpath 'com.google.gms:google-services:4.3.4'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.7.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'com.google.gms:google-services:4.3.10'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.7.1'
    }
}
plugins {
    id 'com.onesignal.androidsdk.onesignal-gradle-plugin'
}
apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply from: "jacoco.gradle"
apply plugin: 'kotlin-android'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'


jacoco {
    toolVersion = "0.8.5"
}

def githubProperties = new Properties()

//Read the local/github properties content
if (project.rootProject.file("local.properties").exists()) {
    githubProperties.load(new FileInputStream(rootProject.file("local.properties")))
} else if (project.rootProject.file("github.properties").exists()) {
    githubProperties.load(new FileInputStream(rootProject.file("github.properties")))
}

allprojects {
    repositories {
        google()
        mavenLocal()
        mavenCentral()
        maven { url 'https://maven.google.com' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url "http://dl.bintray.com/ona/kujaku" }
        maven { url 'https://maven.fabric.io/public' }
        /** GitHub packages **/
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ellykits/neat-form")
            credentials {
                username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
            }
        }
        maven {
            name = "GitHubPackages"
            /**
             * Configure path of the package repository on Github using the GITHUB_USER_ID and * Git Repository */
            url = uri("https://maven.pkg.github.com/io.ona.rdt-capture/lib")
            credentials {
                username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
            }
        }
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/com.ibm.fhir/fhir-model")
            credentials {
                username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
            }
        }
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/com.ibm.fhir/fhir-path")
            credentials {
                username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
            }
        }
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/BlueCodeSystems/opensrp-client-ecap-chw-core")
            credentials {
                username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
            }
        }
        maven {
            name = "GitHubPackages"
            url = uri("https://mvnrepository.com/artifact/com.ibm.fhir/fhir-path")
            credentials {
                username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
            }
        }
        /*maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/BlueCodeSystems/opensrp-client-household")
            credentials {
                username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
            }
        }*/
    }
}

android {

    useLibrary 'org.apache.http.legacy'
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    defaultConfig {
        applicationId "com.bluecodeltd.chw"
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode 14
        versionName "v6.1.2"
        multiDexEnabled true
        buildConfigField "long", "MAX_SERVER_TIME_DIFFERENCE", "1800000l"
        buildConfigField "boolean", "TIME_CHECK", "false"
        buildConfigField "String", "SYNC_TYPE", '"teamId"'
        buildConfigField "int", "MAX_SYNC_RETRIES", '3'
        buildConfigField "long", "BUILD_TIMESTAMP", System.currentTimeMillis() + "L"
        buildConfigField "boolean", "IS_SYNC_SETTINGS", "false"
        buildConfigField "String", "THINKMD_BASE_URL", '"https://app.africa.thinkmd.tech"'
        buildConfigField "String", "THINKMD_END_POINT", '"/#/start"'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }

        if (project.rootProject.file("local.properties").exists()) {

            Properties properties = new Properties()
            properties.load(project.rootProject.file("local.properties").newDataInputStream())

            if (properties != null && properties.containsKey("oauth.client.id")) {

                buildConfigField "String", "OAUTH_CLIENT_ID", properties["oauth.client.id"]

            } else {
                project.logger.error("oauth.client.id variable is not set in your local.properties")
                buildConfigField "String", "OAUTH_CLIENT_ID", "\"sample_client_id\""
            }


            if (properties != null && properties.containsKey("oauth.client.secret")) {

                buildConfigField "String", "OAUTH_CLIENT_SECRET", properties["oauth.client.secret"]

            } else {
                project.logger.error("oauth.client.secret variable is not set in your local.properties")
                buildConfigField "String", "OAUTH_CLIENT_SECRET", "\"sample_client_secret\""
            }

            if (properties != null &&
                    properties.containsKey("mapbox.sdk.token")) {
                buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", properties["mapbox.sdk.token"]
            } else {
                println("Mapbox key config variables is not set in your local.properties")
                buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", "\"sample_key\""
            }

        } else {
            println("local.properties does not exist")
            buildConfigField "String", "OAUTH_CLIENT_ID", "\"sample_client_id\""
            buildConfigField "String", "OAUTH_CLIENT_SECRET", "\"sample_client_secret\""
            buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", "\"sample_key\""
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }



    buildTypes {

        release {
            //debuggable true // Useful when debugging release builds

            minifyEnabled false
            //shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_INITIAL_BATCH_SIZE", '200'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_BATCH_SIZE", '200'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_SOURCE", '4'
            buildConfigField "boolean", "TIME_CHECK", "true"
            buildConfigField "int", "DATA_SYNC_DURATION_MINUTES", '15'
            buildConfigField "int", "VACCINE_SYNC_PROCESSING_MINUTES", '30'
            buildConfigField "int", "IMAGE_UPLOAD_MINUTES", '180'
            buildConfigField "int", "PULL_UNIQUE_IDS_MINUTES", '180'
            buildConfigField "int", "HOME_VISIT_MINUTES", '60'
            buildConfigField "int", "REPORT_INDICATOR_GENERATION_MINUTES", '120'
            buildConfigField "int", "BASE_PNC_CLOSE_MINUTES", '1440'
            buildConfigField "int", "SCHEDULE_SERVICE_MINUTES", '720'
            buildConfigField "int", "STOCK_USAGE_REPORT_MINUTES", '1440'
            buildConfigField "boolean", "USE_UNIFIED_REFERRAL_APPROACH", "true"
            buildConfigField "boolean", "BUILD_FOR_BORESHA_AFYA_SOUTH", "false"
        }

        debug {

            buildConfigField "int", "OPENMRS_UNIQUE_ID_INITIAL_BATCH_SIZE", '200'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_BATCH_SIZE", '200'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_SOURCE", '4'
            buildConfigField "boolean", "TIME_CHECK", "false"
            buildConfigField "int", "DATA_SYNC_DURATION_MINUTES", '15'
            buildConfigField "int", "VACCINE_SYNC_PROCESSING_MINUTES", '30'
            buildConfigField "int", "IMAGE_UPLOAD_MINUTES", '15'
            buildConfigField "int", "PULL_UNIQUE_IDS_MINUTES", '15'
            buildConfigField "int", "HOME_VISIT_MINUTES", '60'
            buildConfigField "int", "REPORT_INDICATOR_GENERATION_MINUTES", '120'
            buildConfigField "int", "BASE_PNC_CLOSE_MINUTES", '1440'
            buildConfigField "int", "SCHEDULE_SERVICE_MINUTES", '360'
            buildConfigField "int", "STOCK_USAGE_REPORT_MINUTES", '1440'
            buildConfigField "boolean", "USE_UNIFIED_REFERRAL_APPROACH", "true"
            buildConfigField "boolean", "BUILD_FOR_BORESHA_AFYA_SOUTH", "false"
          //  testCoverageEnabled true
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.md'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'LICENSE.txt'
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
        unitTests.all {
            systemProperty 'robolectric.enabledSdks', '28'
            jvmArgs '-noverify'
        }
    }

    configurations.all {
        resolutionStrategy {
            force 'androidx.appcompat:appcompat:1.0.2'
            force 'com.google.android.material:material:1.0.0'
        }
    }

    flavorDimensions 'baseDimension'
    productFlavors {
        ecap {
            dimension = 'baseDimension'
            applicationIdSuffix ".ecap"
            versionCode 28
            versionName "v6.2.6"
            buildConfigField "String", 'opensrp_url', '"https://opensrp.ecap.bluecodeltd.com/opensrp/"'
            buildConfigField "String", 'guidebooks_url', '"https://opensrp.s3.amazonaws.com/media/ba/"'
            buildConfigField "String", 'opensrp_url_debug', '"https://opensrp.ecap.bluecodeltd.com/opensrp/"'
            buildConfigField "String[]", "LOCATION_HIERACHY", '{"Country","Province","District","Ward","Health Facility"}'
            buildConfigField "String[]", "ALLOWED_LOCATION_LEVELS", '{"Country","Province","District","Ward","Health Facility"}'
            buildConfigField "String[]", "ALLOWED_LOCATION_LEVELS_DEBUG", '{"Country","Province","District","Ward","Health Facility"}'
            buildConfigField "String", 'DEFAULT_LOCATION', '"Health Facility"'
            buildConfigField "String", 'DEFAULT_LOCATION_DEBUG', '"Health Facility"'
            buildConfigField "int", "DATABASE_VERSION", '8'
        }
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation "com.nerdstone:neat-form-core:1.1.4"
    implementation "io.ona.rdt-capture:lib:2.1.0"
    implementation "com.ibm.fhir:fhir-model:4.7.1"
    implementation "com.ibm.fhir:fhir-path:4.7.1"
//    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.14'

  //  implementation('org.smartregister:opensrp-ecap-chw-core:1.0.5-RELEASE@aar') {
         implementation(project(":opensrp-ecap-chw-core")) {
        transitive = true
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'androidx.legacy', module: 'legacy-support-v4'
        exclude group: 'androidx.appcompat', module: 'appcompat'
        exclude group: 'androidx.constraintlayout', module: 'constraintlayout'
        exclude group: 'com.rengwuxian.materialedittext', module: 'library'
        exclude group: 'stax', module: 'stax-api'
        exclude group: 'io.ona.kujaku', module: 'library'
        exclude group: 'com.github.lecho', module: 'hellocharts-library'
    }
    implementation 'com.google.firebase:firebase-crashlytics:18.2.3'
    implementation 'com.github.javiersantos:AppUpdater:2.7'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation 'com.mapbox.mapboxsdk:mapbox-sdk-turf:5.1.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.github.gcacace:signature-pad:1.3.1'
    implementation 'com.github.lecho:hellocharts-library:1.5.8@aar'
    //For viewing PDFs in the app
    implementation 'com.github.barteksc:android-pdf-viewer:3.2.0-beta.1'
    implementation 'androidx.wear:wear:1.0.0'
    //For Push Notifications
    implementation 'com.onesignal:OneSignal:[4.0.0, 4.99.99]'
    //For Sentry
    implementation 'io.sentry:sentry-android:5.1.2'
    //Custom Toast
    implementation 'com.github.GrenderG:Toasty:1.5.2'
    //SwipeToRefresh
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'
    //Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.5.0'
    //GSON
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    //Material Icons
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'androidx.navigation:navigation-fragment:2.3.5'
    implementation 'androidx.navigation:navigation-ui:2.3.5'
    //For Charts
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'org.mockito:mockito-android:3.0.0'

    testImplementation "org.koin:koin-test:2.0.1"
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.mockito:mockito-core:3.1.0'
    testImplementation 'org.robolectric:robolectric:4.3.1'
    testImplementation 'org.robolectric:shadows-multidex:4.3.1'
    testImplementation 'org.robolectric:shadows-support-v4:3.4-rc2'
    testImplementation 'androidx.test:core:1.3.0'
    compileOnly 'com.google.android.wearable:wearable:2.6.0'
}

def flavors = android.productFlavors.collect { flavor -> flavor.name }
if (!flavors) flavors.add('')

def testDependencies = []
flavors.each { productFlavorName ->
    testDependencies.add("test${productFlavorName.capitalize()}DebugUnitTest")
    testDependencies.add("create${productFlavorName.capitalize()}DebugCoverageReport")
}

// task jacocoTestReport(type: JacocoReport, dependsOn: testDependencies.take(2)) {
task jacocoTestReport(type: JacocoReport, dependsOn: [
        'testTogoDebugUnitTest', 'createTogoDebugCoverageReport',
        'testBaDebugUnitTest', 'createBaDebugCoverageReport'
]) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
    getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/baDebug/classes/", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'jacoco/testBaDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ]))
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    maxHeapSize = "3g"
}

tasks.coveralls {
    dependsOn 'jacocoTestReport'
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"
    sourceDirs = ["$project.projectDir/src/main/java"]
}